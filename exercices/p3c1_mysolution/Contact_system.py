from abc import ABC, abstractmethod


class ContactSystem(ABC):
    """Classe abstraite utilis√©e pour envoyer un message √† un utilisateur."""

    @abstractmethod
    def send(self, message):
        """Toutes les sous-classes de ContactSystem doivent impl√©menter send."""
        pass


class TextContactSystem(ContactSystem):
    """Envoi un message √† l'utilisateur par SMS."""

    def __init__(self, phone_number):
        """Initialise le num√©ro de t√©l√©phone."""
        super().__init__()
        validate_phone(phone_number)
        self.phone_number = phone_number

    def send(self, message):
        """Envoi le message."""
        print(f'Envoi du message "{message}" au num√©ro {self.phone_number}')

    def __str__(self):
        """Repr√©sentation lisible."""
        return f"Le num√©ro de t√©l√©phone est {self.phone_number}"


class OwlContactSystem(ContactSystem):
    """Envoi un message en utilisant une chouette ! üßô‚Äç‚ôÇÔ∏è"""

    def __init__(self, address):
        """Initialise l'addresse."""
        varify_address(address)
        self.address = address
        self.owl = "Hedwige"
        super().__init__()

    def send(self, message):
        """Envoi le message."""
        print(f'Envoi du message "{message}" par chouette {self.owl}')

    def __str__(self):
        """Repr√©sentation."""
        return f"L'addresse est '{self.address}'"


def varify_address(address):
    """Fausse fonction qui retourne True."""
    return True


def validate_phone(phone_number):
    """Retourne True par d√©faut."""
    return True
